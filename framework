<?php
    require_once __DIR__ . '/vendor/autoload.php';
    use Classes\routes;
    use Classes\config;

class framework {
    public static function start($arg1 = null, $arg2 = null) {
        switch ($arg1) {
            case 'server':
                self::server();
                break;
            case 'route:list':
                self::routes();
                break;
            case 'key:generate':
                self::generateKey(); 
                break;
            case 'controller:make':
                self::makeController($arg2); 
                break;
            case 'model:make':
                self::makeModel($arg2);
                break;
            case 'migration:make':
                self::makeMigration($arg2);
                break;
            case 'migration:migrate': 
                self::migrate();
                break;
            case 'migration:drop':
                self::dropMigrate();
                break;
            case 'migration:fresh':
                self::freshMigrate();
                break;
            default:
                echo "L'argomento '$arg1' non esiste!" . PHP_EOL;
                break;
        }
    }

    public static function server() {
        shell_exec('php -S localhost:8000');
    }

    public static function routes() {
        $router = new routes();

        require __DIR__ . '/routes/web.php';
        require __DIR__ . '/routes/api.php';

        foreach($router::getRoutes() as $route) {
            if(isset($route['route'])) {
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Route: $route[route] | Page: $route[page]" .PHP_EOL;
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            } else if(isset($route['api'])){
                echo "-------";
                for($i = 0; $i < strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Api: $route[api] | Page: $route[page]" .PHP_EOL;
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            } else if (isset($route['controller'])) {
                $functions = isset($route['function']) ? $route['function'] : 'index,create,update,delete';
                echo "------------";
                for($i = 0; $i < strlen($route['controller']); $i++) {
                    echo '-';
                }
                echo '--------------';
                for($i = 0; $i <= strlen($functions); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Route: $route[uri] | Controller: $route[controller] | function: $functions" . PHP_EOL;
                echo "------------";
                for($i = 0; $i <= strlen($route['controller']); $i++) {
                    echo '-';
                }
                echo '-------------';
                for($i = 0; $i <= strlen($functions); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            }
        }
    }

    public static function generateKey() {
        $key = config::getSetting("key");
        if($key == null) {
            config::generateKey();
            echo "key generated!" . PHP_EOL;
        } else {
            echo "Error: the key alredy exist!" . PHP_EOL;
        }
    }

    public static function makeController($arg2) {
        if(isset($arg2)) {
            $controllerName = $arg2;
            $controller = fopen(__DIR__ . "/controllers/$controllerName.php", 'w');
            $controllerTexts = "<?php
use Classes\controllers;

class $controllerName implements controllers {
    
    public static function index() {
        
    }

    public static function create() {
        
    }

    public static function update() {
        
    }

    public static function delete() {
        
    }

}";
            fwrite($controller, $controllerTexts);
            fclose($controller);
        } else {
            echo 'Error: the correct command is "php framework controller:make {controllerName}"' . PHP_EOL;
        }
    }

    public static function makeModel($arg2) {
        if(isset($arg2)) {
            
            $file = fopen(__DIR__ ."/models/$arg2.php", "w" );
            $text = "<?php
 namespace Models;
 use Classes\model;
 class $arg2 extends model {
     public static " . '$table' . " = '';
     public static " . '$parameters' . " = [
         '1',
         '2',
         '3',
     ];
 }
 ";
         fwrite($file, $text);
         fclose($file);
 
         } else {
             echo 'Error: the correct command is "php framework model:make {modelName}"' . PHP_EOL;
         }
    }

    public static function makeMigration($arg2) {
        if(isset($arg2)) {
            
            $file = fopen(__DIR__ ."/migrations/$arg2.php", "w" );
            $text = "<?php
 namespace Migrations;
 use Classes\migrations;
 class $arg2" . ' {
    public function createTable() {
        $migration = new migrations("test");
        $migration->int("id");
        $migration->autoIncrement();
        $migration->text("test");
        $migration->nullable();
        $migration->primaryKey("id");
        $migration->migrate();
    }

    public function deleteTable() {
        $migration = new migrations("test");
        $migration->delete();
    }
 }';
         fwrite($file, $text);
         fclose($file);
 
         } else {
             echo 'Error: the correct command is "php framework make:migration {migrationName}"' . PHP_EOL;
         }
    }

    public static function migrate() {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->createTable();
        }

        echo 'Migrate import success!' . PHP_EOL;
    }

    public static function dropMigrate() {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->deleteTable();
        }

        echo 'Migrate drop success!' . PHP_EOL;
    }

    public static function freshMigrate() {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->deleteTable();
            $c->createTable();
        }

        echo 'Migrate fresh success!' . PHP_EOL;
    }

}

$arg1 = empty($argv[1]) ? null : $argv[1];
$arg2 = empty($argv[2]) ? null : $argv[2];

framework::start($arg1, $arg2);