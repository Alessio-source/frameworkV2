<?php
    require_once __DIR__ . '/vendor/autoload.php';
    use Classes\routes;

    if($argv[1] == 'server') {
        shell_exec('php -S localhost:8000');
    } else if ($argv[1] == 'route:list') {
        $router = new routes();

        require __DIR__ . '/routes/web.php';
        require __DIR__ . '/routes/api.php';

        foreach($router::getRoutes() as $route) {
            if(isset($route['route'])) {
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Route: $route[route] | Page: $route[page]" .PHP_EOL;
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            } else if(isset($route['api'])){
                echo "-------";
                for($i = 0; $i < strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Api: $route[api] | Page: $route[page]" .PHP_EOL;
                echo "-------";
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo '---------';
                for($i = 0; $i <= strlen($route['route']); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            } else if (isset($route['controller'])) {
                $functions = isset($route['function']) ? $route['function'] : 'index,create,update,delete';
                echo "------------";
                for($i = 0; $i < strlen($route['controller']); $i++) {
                    echo '-';
                }
                echo '--------------';
                for($i = 0; $i <= strlen($functions); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
                echo "Route: $route[uri] | Controller: $route[controller] | function: $functions" . PHP_EOL;
                echo "------------";
                for($i = 0; $i <= strlen($route['controller']); $i++) {
                    echo '-';
                }
                echo '-------------';
                for($i = 0; $i <= strlen($functions); $i++) {
                    echo '-';
                }
                echo PHP_EOL;
            }
        }
    } else if ($argv[1] == 'controller:make') {
        if(isset($argv[2])) {
            $controllerName = $argv[2];
            $controller = fopen(__DIR__ . "/controllers/$controllerName.php", 'w');
            $controllerTexts = "<?php
use Classes\controllers;

class $controllerName implements controllers {
    
    public static function index() {
        
    }

    public static function create() {
        
    }

    public static function update() {
        
    }

    public static function delete() {
        
    }

}";
            fwrite($controller, $controllerTexts);
            fclose($controller);
        } else {
            echo 'Error: the correct command is "php framework controller:make {controllerName}"' . PHP_EOL;
        }
    } else if ($argv[1] == 'make:model') {
        if(isset($argv[2])) {
            
           $file = fopen(__DIR__ ."/models/$argv[2].php", "w" );
           $text = "<?php
namespace Models;
use Classes\model;
class $argv[2] extends model {
    public static " . '$table' . " = '';
    public static " . '$parameters' . " = [
        '1',
        '2',
        '3',
    ];
}
";
        fwrite($file, $text);
        fclose($file);

        } else {
            echo 'Error: the correct command is "php framework make:model {modelName}"' . PHP_EOL;
        }
    } else if ($argv[1] == 'make:migration') {
        if(isset($argv[2])) {
            
           $file = fopen(__DIR__ ."/migrations/$argv[2].php", "w" );
           $text = "<?php
namespace Migrations;
use Classes\migration;
class $argv[2] extends migration {
    public static " . '$table' . " = '';
    public static " . '$parameters' . " = [
        '1',
        '2',
        '3',
    ];
}
";
        fwrite($file, $text);
        fclose($file);

        } else {
            echo 'Error: the correct command is "php framework make:migration {migrationName}"' . PHP_EOL;
        }
    } else if($argv[1] == "migrate") {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->createTable();
        }

        echo 'Migrate import success!' . PHP_EOL;
    } else if($argv[1] == "migrate:drop") {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->deleteTable();
        }

        echo 'Migrate drop success!' . PHP_EOL;
    }

    else if($argv[1] == "migrate:fresh") {
        $files = scandir(__DIR__ . '/migrations');
        unset($files[0]);
        unset($files[1]);
        foreach($files as $file) {
            $file = explode('.php', $file);
            $classe = $file[0];
            $c = "Migrations\\$classe";
            $c = new $c();
            $c->deleteTable();
            $c->createTable();
        }

        echo 'Migrate fresh success!' . PHP_EOL;
    }